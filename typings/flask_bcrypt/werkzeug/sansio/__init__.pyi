"""
This type stub file was generated by pyright.
"""

import re
import typing as t
from dataclasses import dataclass
from enum import Enum, auto
from ..datastructures import Headers
from ..exceptions import RequestEntityTooLarge
from ..http import parse_options_header

class Event:
    ...


@dataclass(frozen=True)
class Preamble(Event):
    data: bytes
    ...


@dataclass(frozen=True)
class Field(Event):
    name: str
    headers: Headers
    ...


@dataclass(frozen=True)
class File(Event):
    name: str
    filename: str
    headers: Headers
    ...


@dataclass(frozen=True)
class Data(Event):
    data: bytes
    more_data: bool
    ...


@dataclass(frozen=True)
class Epilogue(Event):
    data: bytes
    ...


class NeedData(Event):
    ...


NEED_DATA = ...
class State(Enum):
    PREAMBLE = ...
    PART = ...
    DATA = ...
    DATA_START = ...
    EPILOGUE = ...
    COMPLETE = ...


LINE_BREAK = ...
BLANK_LINE_RE = ...
LINE_BREAK_RE = ...
HEADER_CONTINUATION_RE = ...
SEARCH_EXTRA_LENGTH = ...
class MultipartDecoder:
    """Decodes a multipart message as bytes into Python events.

    The part data is returned as available to allow the caller to save
    the data from memory to disk, if desired.
    """
    def __init__(self, boundary: bytes, max_form_memory_size: int | None = ..., *, max_parts: int | None = ...) -> None:
        ...
    
    def last_newline(self, data: bytes) -> int:
        ...
    
    def receive_data(self, data: bytes | None) -> None:
        ...
    
    def next_event(self) -> Event:
        ...
    


class MultipartEncoder:
    def __init__(self, boundary: bytes) -> None:
        ...
    
    def send_event(self, event: Event) -> bytes:
        ...
    


